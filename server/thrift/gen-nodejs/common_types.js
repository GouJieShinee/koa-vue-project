//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.SourceType = {
  'REFUND' : 1,
  'COMPLAIN' : 2
};
ttypes.AdvertisementStateEnum = {
  'READY' : 1,
  'USING' : 2
};
ttypes.AdvertisementTypeEnum = {
  'PRODUCT_DETAIL_MIDDLE_FIXED_AD' : 1,
  'PRODUCT_DETAIL_RIGHT_SUSPEND_AD' : 2,
  'ORDER_LIST_TOP_AD' : 3,
  'ORDER_LIST_BOTTOM_AD' : 4,
  'PRODUCT_DETAIL_STICKY_NOTE_AD' : 5,
  'PAY_SUCCESS_MIDDLE_AD' : 6,
  'PRODUCT_DETAIL_PROMOTION_AD' : 7
};
ttypes.SellerGuestbookQueryType = {
  'findById' : 15001,
  'findBySellerId' : 15002,
  'findBysellerNickname' : 15003,
  'findByPhone' : 15004,
  'findByState' : 15005,
  'findByCreateAt' : 15006,
  'findByType' : 15007,
  'findByHandleTime' : 15008,
  'findByHandlePeople' : 15009,
  'findByContent' : 15110,
  'findByHandleResult' : 15111,
  'findByAccount' : 15112,
  'findByChildAccount' : 15113
};
var OperationParam = module.exports.OperationParam = function(args) {
  this.fromSource = null;
  this.operatorType = null;
  this.operatorId = null;
  this.operatorName = null;
  if (args) {
    if (args.fromSource !== undefined && args.fromSource !== null) {
      this.fromSource = args.fromSource;
    }
    if (args.operatorType !== undefined && args.operatorType !== null) {
      this.operatorType = args.operatorType;
    }
    if (args.operatorId !== undefined && args.operatorId !== null) {
      this.operatorId = args.operatorId;
    }
    if (args.operatorName !== undefined && args.operatorName !== null) {
      this.operatorName = args.operatorName;
    }
  }
};
OperationParam.prototype = {};
OperationParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fromSource = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.operatorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.operatorId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.operatorName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OperationParam.prototype.write = function(output) {
  output.writeStructBegin('OperationParam');
  if (this.fromSource !== null && this.fromSource !== undefined) {
    output.writeFieldBegin('fromSource', Thrift.Type.STRING, 1);
    output.writeString(this.fromSource);
    output.writeFieldEnd();
  }
  if (this.operatorType !== null && this.operatorType !== undefined) {
    output.writeFieldBegin('operatorType', Thrift.Type.I32, 2);
    output.writeI32(this.operatorType);
    output.writeFieldEnd();
  }
  if (this.operatorId !== null && this.operatorId !== undefined) {
    output.writeFieldBegin('operatorId', Thrift.Type.I32, 3);
    output.writeI32(this.operatorId);
    output.writeFieldEnd();
  }
  if (this.operatorName !== null && this.operatorName !== undefined) {
    output.writeFieldBegin('operatorName', Thrift.Type.STRING, 4);
    output.writeString(this.operatorName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AreaInfo = module.exports.AreaInfo = function(args) {
  this.id = null;
  this.name = null;
  this.shortName = null;
  this.property = null;
  this.postCode = null;
  this.pinyin = null;
  this.initial = null;
  this.provinceId = null;
  this.cityId = null;
  this.countyId = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.shortName !== undefined && args.shortName !== null) {
      this.shortName = args.shortName;
    }
    if (args.property !== undefined && args.property !== null) {
      this.property = args.property;
    }
    if (args.postCode !== undefined && args.postCode !== null) {
      this.postCode = args.postCode;
    }
    if (args.pinyin !== undefined && args.pinyin !== null) {
      this.pinyin = args.pinyin;
    }
    if (args.initial !== undefined && args.initial !== null) {
      this.initial = args.initial;
    }
    if (args.provinceId !== undefined && args.provinceId !== null) {
      this.provinceId = args.provinceId;
    }
    if (args.cityId !== undefined && args.cityId !== null) {
      this.cityId = args.cityId;
    }
    if (args.countyId !== undefined && args.countyId !== null) {
      this.countyId = args.countyId;
    }
  }
};
AreaInfo.prototype = {};
AreaInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.shortName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.postCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.pinyin = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.initial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.countyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AreaInfo.prototype.write = function(output) {
  output.writeStructBegin('AreaInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.shortName !== null && this.shortName !== undefined) {
    output.writeFieldBegin('shortName', Thrift.Type.STRING, 3);
    output.writeString(this.shortName);
    output.writeFieldEnd();
  }
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 4);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  if (this.postCode !== null && this.postCode !== undefined) {
    output.writeFieldBegin('postCode', Thrift.Type.STRING, 5);
    output.writeString(this.postCode);
    output.writeFieldEnd();
  }
  if (this.pinyin !== null && this.pinyin !== undefined) {
    output.writeFieldBegin('pinyin', Thrift.Type.STRING, 6);
    output.writeString(this.pinyin);
    output.writeFieldEnd();
  }
  if (this.initial !== null && this.initial !== undefined) {
    output.writeFieldBegin('initial', Thrift.Type.STRING, 7);
    output.writeString(this.initial);
    output.writeFieldEnd();
  }
  if (this.provinceId !== null && this.provinceId !== undefined) {
    output.writeFieldBegin('provinceId', Thrift.Type.I32, 8);
    output.writeI32(this.provinceId);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 9);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  if (this.countyId !== null && this.countyId !== undefined) {
    output.writeFieldBegin('countyId', Thrift.Type.I32, 10);
    output.writeI32(this.countyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Attribution = module.exports.Attribution = function(args) {
  this.provinceId = null;
  this.provinceName = null;
  this.cityId = null;
  this.cityName = null;
  this.countyId = null;
  this.countyName = null;
  this.shortProvinceName = null;
  this.shortCityName = null;
  this.shortCountyName = null;
  if (args) {
    if (args.provinceId !== undefined && args.provinceId !== null) {
      this.provinceId = args.provinceId;
    }
    if (args.provinceName !== undefined && args.provinceName !== null) {
      this.provinceName = args.provinceName;
    }
    if (args.cityId !== undefined && args.cityId !== null) {
      this.cityId = args.cityId;
    }
    if (args.cityName !== undefined && args.cityName !== null) {
      this.cityName = args.cityName;
    }
    if (args.countyId !== undefined && args.countyId !== null) {
      this.countyId = args.countyId;
    }
    if (args.countyName !== undefined && args.countyName !== null) {
      this.countyName = args.countyName;
    }
    if (args.shortProvinceName !== undefined && args.shortProvinceName !== null) {
      this.shortProvinceName = args.shortProvinceName;
    }
    if (args.shortCityName !== undefined && args.shortCityName !== null) {
      this.shortCityName = args.shortCityName;
    }
    if (args.shortCountyName !== undefined && args.shortCountyName !== null) {
      this.shortCountyName = args.shortCountyName;
    }
  }
};
Attribution.prototype = {};
Attribution.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.provinceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.countyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.countyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.shortProvinceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.shortCityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.shortCountyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Attribution.prototype.write = function(output) {
  output.writeStructBegin('Attribution');
  if (this.provinceId !== null && this.provinceId !== undefined) {
    output.writeFieldBegin('provinceId', Thrift.Type.I32, 1);
    output.writeI32(this.provinceId);
    output.writeFieldEnd();
  }
  if (this.provinceName !== null && this.provinceName !== undefined) {
    output.writeFieldBegin('provinceName', Thrift.Type.STRING, 2);
    output.writeString(this.provinceName);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 3);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  if (this.cityName !== null && this.cityName !== undefined) {
    output.writeFieldBegin('cityName', Thrift.Type.STRING, 4);
    output.writeString(this.cityName);
    output.writeFieldEnd();
  }
  if (this.countyId !== null && this.countyId !== undefined) {
    output.writeFieldBegin('countyId', Thrift.Type.I32, 5);
    output.writeI32(this.countyId);
    output.writeFieldEnd();
  }
  if (this.countyName !== null && this.countyName !== undefined) {
    output.writeFieldBegin('countyName', Thrift.Type.STRING, 6);
    output.writeString(this.countyName);
    output.writeFieldEnd();
  }
  if (this.shortProvinceName !== null && this.shortProvinceName !== undefined) {
    output.writeFieldBegin('shortProvinceName', Thrift.Type.STRING, 7);
    output.writeString(this.shortProvinceName);
    output.writeFieldEnd();
  }
  if (this.shortCityName !== null && this.shortCityName !== undefined) {
    output.writeFieldBegin('shortCityName', Thrift.Type.STRING, 8);
    output.writeString(this.shortCityName);
    output.writeFieldEnd();
  }
  if (this.shortCountyName !== null && this.shortCountyName !== undefined) {
    output.writeFieldBegin('shortCountyName', Thrift.Type.STRING, 9);
    output.writeString(this.shortCountyName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AttributionOperator = module.exports.AttributionOperator = function(args) {
  this.provinceId = null;
  this.provinceName = null;
  this.cityId = null;
  this.cityName = null;
  this.operator = null;
  if (args) {
    if (args.provinceId !== undefined && args.provinceId !== null) {
      this.provinceId = args.provinceId;
    }
    if (args.provinceName !== undefined && args.provinceName !== null) {
      this.provinceName = args.provinceName;
    }
    if (args.cityId !== undefined && args.cityId !== null) {
      this.cityId = args.cityId;
    }
    if (args.cityName !== undefined && args.cityName !== null) {
      this.cityName = args.cityName;
    }
    if (args.operator !== undefined && args.operator !== null) {
      this.operator = args.operator;
    }
  }
};
AttributionOperator.prototype = {};
AttributionOperator.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.provinceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cityName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.operator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AttributionOperator.prototype.write = function(output) {
  output.writeStructBegin('AttributionOperator');
  if (this.provinceId !== null && this.provinceId !== undefined) {
    output.writeFieldBegin('provinceId', Thrift.Type.I32, 1);
    output.writeI32(this.provinceId);
    output.writeFieldEnd();
  }
  if (this.provinceName !== null && this.provinceName !== undefined) {
    output.writeFieldBegin('provinceName', Thrift.Type.STRING, 2);
    output.writeString(this.provinceName);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I32, 3);
    output.writeI32(this.cityId);
    output.writeFieldEnd();
  }
  if (this.cityName !== null && this.cityName !== undefined) {
    output.writeFieldBegin('cityName', Thrift.Type.STRING, 4);
    output.writeString(this.cityName);
    output.writeFieldEnd();
  }
  if (this.operator !== null && this.operator !== undefined) {
    output.writeFieldBegin('operator', Thrift.Type.STRING, 5);
    output.writeString(this.operator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AttributionId = module.exports.AttributionId = function(args) {
  this.provinceId = null;
  this.cityId = null;
  this.countyId = null;
  if (args) {
    if (args.provinceId !== undefined && args.provinceId !== null) {
      this.provinceId = args.provinceId;
    }
    if (args.cityId !== undefined && args.cityId !== null) {
      this.cityId = args.cityId;
    }
    if (args.countyId !== undefined && args.countyId !== null) {
      this.countyId = args.countyId;
    }
  }
};
AttributionId.prototype = {};
AttributionId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provinceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.cityId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.countyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
